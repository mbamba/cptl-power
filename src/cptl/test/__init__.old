"""
copyright (c) 2014, Gabriel A. Weaver, Coordinated Science Laboratory 
at the University of Illinois at Urbana-Champaign.

This file is part of the Cyber-Physical Topology Language (CPTL):
Electrical Power distribution.

The code is free software:   you can redistribute 
it and/or modify it under the terms of the GNU General Public
License as published by the Free Software Foundation, either version
3 of the License, or (at your option) any later version.

The Cyber-Physical Topology Language (CPTL): Electrical Power
is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License 
along with this program.  If not, see http://www.gnu.org/licenses/
"""

from cptl import NMapDAO
import unittest

"""
Test all implementations of an NMapDAO here.  Currently, we
  have a file-based XML Nmap source though others might
  also be provided in the future.
"""
class TestNMapDAO(unittest.TestCase):

    xml_nmap_path = "data/test/nmap/nmap.input.xml"
    network_group = "egCorp"
    network_id = "simple"
    nmDAO = None

    def setUp(self):
        self.nmDAO = NMapDAO.create(self.xml_nmap_path,
                                    self.network_group,
                                    self.network_id)

    def testGetAssetTypes(self):
        asset_type_refs = self.nmDAO.getAssetTypes()
        self.assertEquals(len(asset_type_refs), 6)

    def testGetAssetRefs(self):
        asset_type_ref = "urn:nmap:network.host"
        actual_asset_refs = self.nmDAO.getAssetRefs(asset_type_ref)
        expected_asset_refs = ["urn:egCorp:simple.HOST_1", "urn:egCorp:simple.HOST_2"]
        self.assertEqual( len(actual_asset_refs), len(expected_asset_refs) )
        for i, actual_asset_ref in enumerate(actual_asset_refs):
            self.assertEqual(actual_asset_ref, expected_asset_refs[i]

                  """
    def testGetHosts(self):
        nmDAO = XMLNMapDAO(xml_nmap_path)
        actual_host_list = nmDAO.getHosts()
        expected_host_list = ["HOST_1", "HOST_2"]
        self.assertEqual( len(actual_host_list), len(expected_host_list) )
        for i, actual_host_id in enumerate(actual_host_list):
            self.assertEqual(actual_host_id, expected_host_list[i])

    def testGetStatus(self):
        nmDAO = XMLNMapDAO(xml_nmap_path)
        hosts = nmDAO.getHosts()
        
        actual_status_str = nmDAO.getStatus()
        expected_status_str = "<nmap:status state=\"up\" reason=\"echo-reply\" reason_ttl=\"bogus\"/>"
        self.assertEqual(actual_status_str, expected_status_str)
        
    def testGetAddress(self):
        nmDAO = XMLNMapDAO(xml_nmap_path)
        actual_address_str = nmDAO.getAddress()
        expected_address_str = "<nmap:address addr=\"74.207.244.221\" addrtype=\"ipv4\"/>"
        self.assertEqual(actual_address_str, expected_address_str)

    def testGetHostNames(self):
        self.assertEqual(2,2)

    def testGetPorts(self):
        self.assertEqual(2,2)

    def testGetOS(self):
        self.assertEqual(2,2)


    def testGetAsset(self):
        return 
        
    def testToCPTL(self):
        nmDAO = XMLNMapDAO(xml_nmap_path)
        actual_cptl = nmDAO.toCPTL()
        expected_cptl = open("../../data/nmap/nmap.cptl.graphml",'r') 
        self.assertEqual(actual_cptl, expected_cptl)
"""

if __name__ == "__main__":
    unittest.main()

