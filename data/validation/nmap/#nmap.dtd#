<!--
    nmap.dtd
    This is the DTD for Nmap's XML output (-oX) format.
    $Id$

    Originally written by:
    William McVey <wam@cisco.com> <wam+nmap@wamber.net>

    Now maintained by Fyodor <fyodor@insecure.org> as part of Nmap.     

    To validate using this file, simply add a DOCTYPE line similar to:
    <!DOCTYPE nmaprun SYSTEM "nmap.dtd">
    to the nmap output immediately below the prologue (the first line).  This
    should allow you to run a validating parser against the output (so long
    as the DTD is in your parser's DTD search path).

    Bugs:
    Most of the elements are "locked" into the specific order that nmap
    generates, when there really is no need for a specific ordering.
    This is primarily because I don't know the xml DTD construct to
    specify "one each of this list of elements, in any order".  If there
    is a construct similar to SGML's '&' operator, please let me know.

    Portions Copyright (c) 2001-2008 Insecure.Com LLC
    Portions Copyright (c) 2001 by Cisco systems, Inc.
 
    Permission to use, copy, modify, and distribute modified and
    unmodified copies of this software for any purpose and without fee is
    hereby granted, provided that (a) this copyright and permission notice
    appear on all copies of the software and supporting documentation, (b)
    the name of Cisco Systems, Inc. not be used in advertising or
    publicity pertaining to distribution of the program without specific
    prior permission, and (c) notice be given in supporting documentation
    that use, modification, copying and distribution is by permission of
    Cisco Systems, Inc.
 
    Cisco Systems, Inc. makes no representations about the suitability
    of this software for any purpose.  THIS SOFTWARE IS PROVIDED ``AS
    IS'' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
    WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS FOR A PARTICULAR PURPOSE.
-->

<!-- parameter entities to specify common "types" used elsewhere in the DTD -->
<!ENTITY % attr_alpha "CDATA" >
<!ENTITY % attr_numeric "CDATA" >
<!ENTITY % attr_ipaddr "CDATA" >
<!ENTITY % attr_percent "CDATA" >
<!ENTITY % attr_type "(ipv4 | ipv6 | mac)" >

<!ENTITY % host_states "(up|down|unknown|skipped)" >

<!-- see: nmap.c:statenum2str for list of port states -->
<!-- Maybe they should be enumerated as in scan_types below , but I -->
<!-- don't know how to escape states like open|filtered -->
<!ENTITY % port_states "CDATA" >

<!ENTITY % hostname_types "(user|PTR)" >

<!-- see output.c:output_xml_scaninfo_records for scan types -->
<!ENTITY % scan_types "(syn|ack|bounce|connect|null|xmas|window|maimon|fin|udp|sctpinit|sctpcookieecho|ipproto)" >

<!-- <!ENTITY % ip_versions "(ipv4)" > -->

<!ENTITY % port_protocols "(ip|tcp|udp|sctp)" >

<!-- Service detection confidence level (portlist.h:struct serviceDeductions)
--> 
<!ENTITY % service_confs  "( 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10)" >

<!-- This element was started in nmap.c:nmap_main().
     It represents to the topmost element of the output document.
-->
<!ELEMENT nmaprun      (scaninfo*, verbose, debugging,
                        ( target | taskbegin | taskprogress | taskend |
                            prescript | postscript | host | output)*,
                            runstats) >
<!ATTLIST nmaprun
	  scanner (nmap) #REQUIRED
	  argsCDATA#IMPLIED
	  start%attr_numeric;#IMPLIED
	  startstrCDATA        #IMPLIED
	  versionCDATA#REQUIRED
	  profile_nameCDATA#IMPLIED
	  xmloutputversion CDATA#REQUIRED
>

<!-- this element is written in output.c:doscaninfo() -->
<!ELEMENT scaninfoEMPTY >
<!ATTLIST scaninfo
	  type%scan_types; #REQUIRED
	  scanflagsCDATA #IMPLIED
	  protocol%port_protocols; #REQUIRED
	  numservices%attr_numeric; #REQUIRED
	  servicesCDATA #REQUIRED
>

<!-- these elements are written in nmap.c:nmap_main() -->
<!ELEMENT verboseEMPTY >
<!ATTLIST verboselevel%attr_numeric;#IMPLIED >


<!ELEMENT debugging EMPTY >
<!ATTLIST debugginglevel%attr_numeric;#IMPLIED >

<!ELEMENT targetEMPTY >
<!ATTLIST targetspecificationCDATA#REQUIRED
	  status(skipped)#IMPLIED
	  reason(invalid)#IMPLIED
>

<!-- this element is written in timing.c:beginOrEndTask() -->
<!ELEMENT taskbeginEMPTY >
<!ATTLIST taskbegin
	  taskCDATA#REQUIRED
	  time%attr_numeric;#REQUIRED
	  extrainfoCDATA#IMPLIED
>

<!-- this element is written in timing.c:printStats() -->
<!ELEMENT taskprogressEMPTY >
<!ATTLIST taskprogress
	  taskCDATA#REQUIRED
	  time%attr_numeric;#REQUIRED
	  percent%attr_percent;#REQUIRED
	  remaining%attr_numeric;#REQUIRED
	  etc%attr_numeric;#REQUIRED
>

<!-- this element is written in timing.c:beginOrEndTask() -->
<!ELEMENT taskendEMPTY >
<!ATTLIST taskend
	  taskCDATA#REQUIRED
	  time%attr_numeric;#REQUIRED
	  extrainfoCDATA#IMPLIED
>

<!-- 
     this element is started in nmap.c:nmap_main() and filled by
     output.c:write_host_status(), output.c:printportoutput(), and
     output.c:printosscanoutput()
-->
<!ELEMENT host( status, address , (address | hostnames |
                          smurf | ports | os | distance | uptime | 
                          tcpsequence | ipidsequence | tcptssequence |
                          hostscript | trace)*, times? ) >
<!ATTLIST host
	  starttime%attr_numeric;#IMPLIED
	  endtime%attr_numeric;#IMPLIED
	  commentCDATA#IMPLIED
>

<!-- these elements are written by output.c:write_xml_initial_hostinfo() -->
<!ELEMENT statusEMPTY >
<!ATTLIST statusstate%host_states;#REQUIRED 
	  reason    CDATA#REQUIRED 
	  reason_ttlCDATA#REQUIRED
 >

<!ELEMENT addressEMPTY >
<!ATTLIST address
	  addr%attr_ipaddr;#REQUIRED
	  addrtype%attr_type;"ipv4"
	  vendorCDATA#IMPLIED
>

<!ELEMENT hostnames(hostname)* >
<!ELEMENT hostnameEMPTY >
<!ATTLIST hostname
	  nameCDATA#IMPLIED
	  type%hostname_types; #IMPLIED
>


<!-- this element is written by output.c:write_host_status() -->
<!ELEMENT smurfEMPTY >
<!ATTLIST smurfresponses%attr_numeric;#REQUIRED >

<!-- these elements are written by output.c:printportoutput() -->

<!ELEMENT ports(extraports* , port*) >

<!ELEMENT extraports(extrareasons)* >
<!ATTLIST extraports
	  state%port_states;#REQUIRED
	  count%attr_numeric;  #REQUIRED
>

<!ELEMENT extrareasons EMPTY >
<!ATTLIST extrareasons
	  reasonCDATA#REQUIRED
	  countCDATA#REQUIRED
>

<!ELEMENT port(state , owner? , service?, script*) >
<!ATTLIST port
	  protocol%port_protocols;#REQUIRED
	  portid%attr_numeric;#REQUIRED
>

<!ELEMENT stateEMPTY >
<!ATTLIST state
	  state%port_states;#REQUIRED 
	  reasonCDATA#REQUIRED
	  reason_ttlCDATA#REQUIRED
	  reason_ipCDATA#IMPLIED
>

<!ELEMENT ownerEMPTY >
<!ATTLIST ownernameCDATA#REQUIRED >

<!ELEMENT service(cpe*) >
<!ATTLIST service
	  nameCDATA#REQUIRED
	  conf%service_confs;#REQUIRED
                        method          (table|probed)  #REQUIRED
                        version         CDATA           #IMPLIED
                        product         CDATA           #IMPLIED
                        extrainfo       CDATA           #IMPLIED
	  tunnel(ssl)#IMPLIED
	  proto(rpc)#IMPLIED
	  rpcnum%attr_numeric;#IMPLIED
	  lowver%attr_numeric;#IMPLIED
	  highver%attr_numeric;#IMPLIED
                        hostname        CDATA           #IMPLIED
                        ostype          CDATA           #IMPLIED
                        devicetype      CDATA           #IMPLIED
                        servicefp       CDATA           #IMPLIED
>

<!ELEMENT cpe (#PCDATA)>

<!ELEMENT script(table|elem)* >
<!ATTLIST script
	  idCDATA#REQUIRED
	  outputCDATA#REQUIRED
>

<!ELEMENT table(table|elem)* >
<!ATTLIST table
    key CDATA #IMPLIED
>

<!ELEMENT elem(#PCDATA)>
<!ATTLIST elem
    key CDATA #IMPLIED
>

<!ELEMENT os( portused* , osmatch*, osfingerprint* ) >

<!ELEMENT portusedEMPTY >
<!ATTLIST portused
	  state %port_states;#REQUIRED
	  proto %port_protocols; #REQUIRED
	  portid %attr_numeric;#REQUIRED
>
<!ELEMENT osclass      (cpe*) >
<!ATTLIST osclass
                       vendor          CDATA           #REQUIRED
                       osgen           CDATA           #IMPLIED
                       type            CDATA           #IMPLIED
                       accuracy        CDATA           #REQUIRED
                       osfamily        CDATA           #REQUIRED
>


<!ELEMENT osmatch(osclass*) >
<!ATTLIST osmatch
	  nameCDATA#REQUIRED
	  accuracy%attr_numeric;#REQUIRED
	  line    %attr_numeric;#REQUIRED
>

<!ELEMENT osfingerprintEMPTY >
<!ATTLIST osfingerprint
	  fingerprintCDATA#REQUIRED
>

<!ELEMENT distanceEMPTY >
<!ATTLIST distance
	  value%attr_numeric;#REQUIRED
>

<!ELEMENT uptimeEMPTY >
<!ATTLIST uptime
	  seconds%attr_numeric;#REQUIRED
	  lastbootCDATA#IMPLIED
>

<!ELEMENT tcpsequenceEMPTY >
<!ATTLIST tcpsequence
	  index%attr_numeric;#REQUIRED
	  difficultyCDATA#REQUIRED
	  valuesCDATA#REQUIRED
>

<!ELEMENT ipidsequenceEMPTY >
<!ATTLIST ipidsequence
	  classCDATA#REQUIRED
	  valuesCDATA#REQUIRED
>

<!ELEMENT tcptssequenceEMPTY >
<!ATTLIST tcptssequence
	  classCDATA#REQUIRED
	  valuesCDATA#IMPLIED
>

<!ELEMENT trace (hop*) >
<!ATTLIST trace
      proto   CDATA   #IMPLIED
      port    CDATA   #IMPLIED
>

<!ELEMENT hop EMPTY>
<!ATTLIST hop
      ttl     CDATA   #REQUIRED
      rtt     CDATA   #IMPLIED
      ipaddr  CDATA   #IMPLIED
      host    CDATA   #IMPLIED
>

<!ELEMENT times EMPTY>
<!ATTLIST times
	  srttCDATA#REQUIRED
	  rttvarCDATA#REQUIRED
	  toCDATA#REQUIRED
>

<!-- For embedding another type of output (screen output) like Zenmap does. -->
<!ELEMENT output (#PCDATA)>
<!ATTLIST output type  (interactive)  #IMPLIED>

<!-- these elements are generated in output.c:printfinaloutput() -->
<!ELEMENT runstats(finished, hosts)>

<!ELEMENT finishedEMPTY >
<!ATTLIST finishedtime%attr_numeric;#REQUIRED 
          timestrCDATA        #IMPLIED
	  elapsed%attr_numeric;#REQUIRED
          summaryCDATA        #IMPLIED
          exit(error|success) #IMPLIED
          errormsgCDATA        #IMPLIED
>

<!ELEMENT hostsEMPTY >
<!ATTLIST hosts
	  up%attr_numeric;"0"
	  down%attr_numeric;"0"
	  total%attr_numeric;#REQUIRED
>

<!ELEMENT hostscript ( script+ )>
<!ELEMENT prescript ( script+ )>
<!ELEMENT postscript ( script+ )>
